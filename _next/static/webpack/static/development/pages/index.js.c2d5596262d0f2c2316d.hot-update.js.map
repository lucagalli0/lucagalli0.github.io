{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.c2d5596262d0f2c2316d.hot-update.js","sources":["webpack:///./src/components/Carousel/Carousel.js"],"sourcesContent":["import * as React from 'react';\nimport styles from './carousel.module.css';\nimport { useSprings, animated } from 'react-spring';\nimport { useDrag } from 'react-use-gesture';\nimport { Box } from '@chakra-ui/core';\n\nfunction clamp(num, clamp, higher) {\n  return higher ? Math.min(Math.max(num, clamp), higher) : Math.min(num, clamp);\n}\n\nexport default function Carousel({\n  activeIndex = 0,\n  ArrowComponent,\n  arrowStyle = {},\n  auto = 0,\n  BulletComponent,\n  bulletStyle = {},\n  children = [],\n  hasArrows = false,\n  hasBullets = false,\n}) {\n  const sliderRef = React.useRef();\n  const [slide, setSlide] = React.useState(0);\n  const [isDragging, setDragging] = React.useState(false);\n\n  // Initialize slides with spring\n  const [springProps, setSpringProps] = useSprings(children.length, (index) => ({\n    offset: index,\n  }));\n\n  // Bindings to set on the element\n  const gestureBinds = useDrag(\n    {\n      onDrag: ({ down, movement: [xDelta], direction: [xDir], distance, cancel, first }) => {\n        if (first) {\n          setDragging(true);\n        }\n        if (sliderRef && sliderRef.current && sliderRef.current.parentElement) {\n          const { width } = sliderRef.current.parentElement.getBoundingClientRect();\n\n          if (down && distance > width / 2) {\n            if (cancel) cancel();\n            setSlide(clamp(slide + (xDir > 0 ? -1 : 1), 0, children.length - 1));\n          }\n          // see:  https://github.com/react-spring/react-spring/issues/861\n          // @ts-ignore\n          setSpringProps((index) => ({\n            offset: (down ? xDelta : 0) / width + (index - slide),\n          }));\n        }\n      },\n      onClick: () => {\n        if (isDragging) {\n          setDragging(false);\n        }\n      },\n    },\n    {\n      drag: {\n        delay: 200,\n      },\n    }\n  );\n\n  // Triggered on slide change\n  React.useEffect(() => {\n    // see:  https://github.com/react-spring/react-spring/issues/861\n    // @ts-ignore\n    setSpringProps((index) => ({ offset: index - slide }));\n  }, [slide, setSpringProps, onSlideChange]);\n\n  // Effect for autosliding\n  React.useEffect(() => {\n    let interval;\n\n    if (auto > 0) {\n      interval = setInterval(() => {\n        const targetIndex = (slide + 1) % children.length;\n        setSlide(targetIndex);\n      }, auto);\n    }\n\n    return () => {\n      if (interval) clearInterval(interval);\n    };\n  }, [auto, children.length, slide]);\n\n  // Jump to slide index when prop changes\n  React.useEffect(() => {\n    setSlide(activeIndex % children.length);\n  }, [activeIndex, children.length]);\n\n  // Sets pointer events none to every child and preserves styles\n  // const childs = children.map((child, index) => (\n  //   <StyledSlide key={index}>{child}</StyledSlide> // eslint-disable-line react/no-array-index-key\n  // ));\n\n  const nextSlide = () => {\n    if (slide === children.length - 1) {\n      setSlide(0);\n      return;\n    }\n\n    setSlide(slide + 1);\n  };\n\n  const previousSlide = () => {\n    if (slide === 0) {\n      setSlide(children.length - 1);\n      return;\n    }\n\n    setSlide(slide - 1);\n  };\n\n  return (\n    <Box h=\"100%\" w=\"100%\" ref={sliderRef}>\n      <Box position=\"relative\" overflow=\"hidden\" h=\"100%\" w=\"100%\">\n        {/* {hasArrows && (\n          <StyledSliderArrows>\n            <Arrow ArrowComponent={ArrowComponent} arrowStyle={arrowStyle} direction=\"left\" onClick={previousSlide} />\n            <Arrow ArrowComponent={ArrowComponent} arrowStyle={arrowStyle} direction=\"right\" onClick={nextSlide} />\n          </StyledSliderArrows>\n        )}\n        {hasBullets && (\n          <StyledBullets>\n            <StyledBulletList>\n              {children.map((_, index) => (\n                <Bullet\n                  key={index} // eslint-disable-line react/no-array-index-key\n                  index={index}\n                  BulletComponent={BulletComponent}\n                  setSlide={setSlide}\n                  activeIndex={slide}\n                  bulletStyle={bulletStyle}\n                />\n              ))}\n            </StyledBulletList>\n          </StyledBullets>\n        )} */}\n        {springProps.map(({ offset }, index) => (\n          <animated.div\n            {...gestureBinds()}\n            key={index} // eslint-disable-line react/no-array-index-key\n            className=\"slider__slide\"\n            style={{\n              transform: offset.interpolate((offsetX) => `translate3d(${offsetX * 100}%, 0, 0)`),\n              position: 'absolute',\n              width: '100%',\n              height: '100%',\n              willChange: 'transform',\n            }}\n          >\n            {children[index]}\n          </animated.div>\n        ))}\n      </Box>\n    </Box>\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAMA;AACA;AADA;AAAA;AANA;AAAA;AAAA;AACA;AACA;AASA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AA0BA;AACA;AADA;AADA;AACA;AAOA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBA;AAAA;AAGA;AAFA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AALA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAmBA;;;;A","sourceRoot":""}